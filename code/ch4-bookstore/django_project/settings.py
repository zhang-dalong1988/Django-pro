"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from environs import Env  # 新增

env = Env()  # 新增
env.read_env()  # 新增

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-)9(b!ci)j+kbw&0*qq(hpt6v67d-jxclk9%_c!+g=xkgu@bkc3"
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# ALLOWED_HOSTS = []

DEBUG = env.bool("DJANGO_DEBUG")  # 新增
ALLOWED_HOSTS = [".herokuapp.com", "localhost", "127.0.0.1"]  # 新增


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",  # 作用：提供 Django 管理后台
    "django.contrib.auth",  # 作用：提供用户认证系统
    "django.contrib.contenttypes",  # 作用：提供内容类型框架,用于跟踪模型和权限
    "django.contrib.sessions",  # 作用：提供会话支持,用于存储和检索会话数据
    "django.contrib.messages",  # 作用：提供消息框架,用于在请求之间传递临时消息
    "django.contrib.staticfiles",  # 作用：提供静态文件管理,用于处理CSS、JavaScript等静态资源
    "django.contrib.sites",  # 作用：提供站点框架,用于管理多个站点
    # 第三方
    "crispy_forms",  # 新增
    "crispy_bootstrap5",  # 新增
    "allauth",  # 新增
    "allauth.account",  # 新增
    # 本地应用
    "accounts.apps.AccountsConfig",  # 新增
    "pages.apps.PagesConfig",  # new
]

AUTH_USER_MODEL = "accounts.CustomUser"  # 新增


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # new
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": "postgres",
    #     "USER": "postgres",
    #     "PASSWORD": "postgres",
    #     "HOST": "db",
    #     "PORT": 5432,
    # }
    "default": env.dj_db_url("DATABASE_URL", default="postgres://postgres@db/postgres")
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # 新增
STATIC_ROOT = BASE_DIR / "staticfiles"  # 新增
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"  # 新增

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# django-crispy-forms

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # 新增
CRISPY_TEMPLATE_PACK = "bootstrap5"  # 新增

# django-allauth

SITE_ID = 1  # 新增

ACCOUNT_SESSION_REMEMBER = True  # 新增
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False  # 新增
ACCOUNT_USERNAME_REQUIRED = False  # 新增
ACCOUNT_AUTHENTICATION_METHOD = "email"  # 新增
ACCOUNT_EMAIL_REQUIRED = True  # 新增
ACCOUNT_UNIQUE_EMAIL = True  # 新增

# 身份验证

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",  # 新增
)

# 邮箱验证

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # 新增
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"  # new

# 登录/注销 行为控制

LOGIN_REDIRECT_URL = "home"
ACCOUNT_LOGOUT_REDIRECT = "home"  # 新增

# Email 功能

DEFAULT_FROM_EMAIL = "admin@djangobookstore.com"  # 新增
